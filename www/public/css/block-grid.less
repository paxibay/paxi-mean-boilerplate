// # Block Grid
// Author: ChrisTM
// Source Gist: https://gist.github.com/ChrisTM/8346916
//
// Technique adapted from Foundation 5 for Bootstrap 3.0.3 to at least 3.3.1.
// https://github.com/zurb/foundation/blob/f755d8704123f86c281ede0b171881e2672f150d/scss/foundation/components/_block-grid.scss
//
// # Example Usage
//
// To produce a grid of 2 items per row on an extra-small screen, and 3 items
// per row on a small screen:
//
// <div class="container">
//   <div class="block-grid-lg-4 block-grid-md-3 block-grid-sm-2 block-grid-xs-2">
//     <div class="block-grid-item">
//       <h1>User 1</h1>
//     </div>
//     <div class="block-grid-item">
//       <h1>User 2</h1>
//     </div>
//     <div class="block-grid-item">
//       <h1>User 3</h1>
//     </div>
//     <div class="block-grid-item">
//       <h1>User 4</h1>
//     </div>
//   </div>
//   <ul class="block-grid-lg-4 block-grid-md-3 block-grid-sm-2 block-grid-xs-2">
//     <li class="block-grid-item">
//       <h1>User 1</h1>
//     </li>
//     <li class="block-grid-item">
//       <h1>User 2</h1>
//     </li>
//     <li class="block-grid-item">
//       <h1>User 3</h1>
//     </li>
//     <li class="block-grid-item">
//       <h1>User 4</h1>
//     </li>
//   </ul>
// </div>

[class*="block-grid-"] {
    display: block;
    margin-left: -(@grid-gutter-width / 2);
    margin-right: -(@grid-gutter-width / 2);
    padding: 0;
    .clearfix();
}

.block-grid-item {
    display: inline;
    margin: 0;
    padding-left: (@grid-gutter-width / 2);
    padding-right: (@grid-gutter-width / 2);
    height: auto;
    float: left;
    list-style: none; // for those who like to use `li` elements as block-grid-items
}

.block-grid (@per-row) {
    & > .block-grid-item {
        width: (100% / @per-row);

        @nth-equation: ~"@{per-row}n+1";
        &:nth-of-type(n) { clear: none; }
        &:nth-of-type(@{nth-equation}) { clear: both; }
    }
}

// Recursive loop that produces rules for block grids of @per-row many items
// per row down to 1 many items per row.
.block-grids(@size, @per-row: @grid-columns) when (@per-row > 0) {
    .block-grid-@{size}-@{per-row} { .block-grid(@per-row); }
    .block-grids(@size, (@per-row - 1));
}

.block-grids(xs);
@media (min-width: @screen-sm-min) { .block-grids(sm) }
@media (min-width: @screen-md-min) { .block-grids(md) }
@media (min-width: @screen-lg-min) { .block-grids(lg) }

// block grid column gutter overrides
.block-grid-cols-gutter-no {
    margin-left: 0;
    margin-right: 0;

    & > .block-grid-item {
        padding-right: 0;
        padding-left: 0;
    }
}

.block-grid-cols-gutter-xs {
    margin-left: -2px;
    margin-right: -2px;

    & > .block-grid-item {
        padding-right: 2px;
        padding-left: 2px;
    }
}

.block-grid-cols-gutter-sm {
    margin-left: -4px;
    margin-right: -4px;

    & > .block-grid-item {
        padding-right: 4px;
        padding-left: 4px;
    }
}

.block-grid-cols-gutter-md {
    margin-left: -6px;
    margin-right: -6px;

    & > .block-grid-item {
        padding-right: 6px;
        padding-left: 6px;
    }
}

.block-grid-cols-gutter-lg {
    margin-left: -8px;
    margin-right: -8px;

    & > .block-grid-item {
        padding-right: 8px;
        padding-left: 8px;
    }
}

// add block grid row gutters!
// .block-grid-rows-gutter-xs > .block-grid-item {
//     padding-bottom: @padding-xs-vertical;
// }
// .block-grid-rows-gutter-sm > .block-grid-item {
//     padding-bottom: @padding-small-vertical;
// }
// .block-grid-rows-gutter-md > .block-grid-item {
//     padding-bottom: @padding-base-vertical;
// }
// .block-grid-rows-gutter-lg > .block-grid-item {
//     padding-bottom: @padding-large-vertical;
// }
// .block-grid-rows-gutter-xl > .block-grid-item {
//     padding-bottom: (@padding-large-vertical * 1.5);
// }
// .block-grid-rows-gutter-xxl > .block-grid-item {
//     padding-bottom: (@padding-large-vertical * 2);
// }
